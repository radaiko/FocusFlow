@using FocusFlowWeb.Services
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

@inject GoogleAuthStateProvider GoogleAuthStateProvider
@inject NavigationManager NavigationManager

<div class="page">
    @if (isLoggedIn) {
        <header>
            <button @onclick="Logout">Logout</button>
        </header>
    } else {
        <header>
            <button @onclick="RedirectToLogin">Login</button>
        </header>
    }
    
    <article>
        @if (!isLoggedIn) {
            <RedirectToLogin/>
        }
        else {
            @Body
        }
    </article>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        var authState = await GoogleAuthStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;
        GoogleAuthStateProvider.AuthenticationStateChanged +=  async (task) => await OnAuthenticationStateChanged(task);
    }
    private async Task OnAuthenticationStateChanged(Task<AuthenticationState> task) {
        var authState = await GoogleAuthStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
    
    private void Logout()
    {
        GoogleAuthStateProvider.NotifyUserLogout();
        NavigationManager.NavigateTo("/login");
    }
}